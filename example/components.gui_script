local gooey = require "gooey.gooey"
local utils = require "gooey.themes.utils"

local COLOR_LIGHTGREY = vmath.vector4(0.8, 0.8, 0.8, 1)
local COLOR_WHITE = vmath.vector4(1)
local COLOR_BLACK = vmath.vector4(0,0,0,1)
local COLOR_RED = vmath.vector4(1,0,0,1)


local function update_radiobutton(radiobutton, state)
	if radiobutton.selected_now then
		gui.set_color(radiobutton.node, COLOR_RED)
		utils.shake(radiobutton.node, vmath.vector3(1))
	elseif radiobutton.deselected_now then
		gui.set_color(radiobutton.node, COLOR_WHITE)
		utils.shake(radiobutton.node, vmath.vector3(1))
	end
end

local function update_checkbox(checkbox, state)
	if checkbox.checked_now then
		gui.set_color(checkbox.node, COLOR_RED)
		utils.shake(checkbox.node, vmath.vector3(1))
	elseif checkbox.unchecked_now then
		gui.set_color(checkbox.node, COLOR_WHITE)
		utils.shake(checkbox.node, vmath.vector3(1))
	end
end

local function update_button(button, state)
	if button.over_now then
		gui.set_color(button.node, COLOR_LIGHTGREY)
	elseif button.out_now then
		gui.set_color(button.node, COLOR_WHITE)
	elseif button.pressed_now then
		utils.shake(button.node, vmath.vector3(1))
	end
end

local function update_input(input, state)
	if input.pressed_now then
		gui.set_color(input.node, COLOR_RED)
	elseif input.released_now then
		gui.set_color(input.node, COLOR_BLACK)
	end
end

local function update_list(list)
	for i,item in ipairs(list.items) do
		gui.set_text(item.nodes[hash("listitem_text")], item.data)
	end
end

function init(self)
	gooey.acquire_input()

	update_checkbox(gooey.checkbox("checkbox").set_checked(true))
	update_radiobutton(gooey.radio("radio2").set_selected(true))
	gooey.input("input_text", gui.KEYBOARD_TYPE_DEFAULT, nil, nil, { empty_text = "EMPTY, MAX 8 CHARS"})
	gooey.input("input_alphanumeric", gui.KEYBOARD_TYPE_DEFAULT, nil, nil, { empty_text = "ALPHA NUMERIC CHARS" })

	self.list_data = { "Sherlock", "Poirot", "Magnum", "Miss Marple", "Morse", "Columbo" }
	update_list(gooey.dynamic_list("dynamiclist", "dynamiclist_bounds", "listitem", self.list_data))
end

function on_input(self, action_id, action)
	local group = gooey.group("group1", function()
		gooey.button("button", action_id,action, function(button)
			if button.long_pressed then
				print("Button was long pressed")
			else
				print("Button was pressed")
			end
		end, update_button)
		
		gooey.button("back", action_id,action, function(button)
			msg.post("controller:/go", "show_menu")
		end, update_button)

		gooey.checkbox("checkbox", action_id, action, function(checkbox)
			print("checkbox", checkbox.checked)
		end, update_checkbox)

		gooey.radiogroup("MYGROUP", action_id, action, function(group_id, action_id, action)
			gooey.radio("radio1", group_id, action_id, action, function(radio)
				print("radio 1", radio.selected)
			end, update_radiobutton)
			gooey.radio("radio2", group_id, action_id, action, function(radio)
				print("radio 2", radio.selected)
			end, update_radiobutton)
			gooey.radio("radio3", group_id, action_id, action, function(radio)
				print("radio 3", radio.selected)
			end, update_radiobutton)
		end)

		gooey.input("input_text", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = "EMPTY, MAX 8 CHARS", max_length = 8 }, update_input)
		gooey.input("input_alphanumeric", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = "ALPHA NUMERIC CHARS", allowed_characters = "[%a%d%s]", use_marked_text = false}, update_input)

		gooey.dynamic_list("dynamiclist", "dynamiclist_bounds", "listitem", self.list_data, action_id, action, nil, function(list)
			print("selected item", list.selected_item, list.data[list.selected_item])
		end, update_list)
	end)
	return group.consumed
end
